const fs = require("fs");
const { execSync } = require("child_process");
const https = require("https");

// Get the GitHub token using the 'gh' CLI
function getGithubToken() {
  try {
    return execSync("gh auth token", { encoding: "utf-8" }).trim();
  } catch (error) {
    console.error("Error fetching GitHub token from gh CLI:", error.message);
    process.exit(1);
  }
}

// get language from the command line flag
const language = process.argv[2];

// GitHub token and API setup
const GITHUB_TOKEN = getGithubToken();

// Initialize result storage
const results = {};

// Function to run GitHub search query using https
function searchGithub(query, type) {
  const options = {
    hostname: "api.github.com",
    path: `/search/code?q=${encodeURIComponent(query)}${
      language ? `+language:${language}` : ""
    }`,
    method: "GET",
    headers: {
      Authorization: `token ${GITHUB_TOKEN}`,
      "User-Agent": "node.js", // GitHub requires a User-Agent header
      Accept: "application/vnd.github.v3.text-match+json", // To get matching lines
    },
  };

  const req = https.request(options, (res) => {
    let data = "";

    res.on("data", (chunk) => {
      data += chunk;
    });

    res.on("end", () => {
      const parsedData = JSON.parse(data);

      // Add the result under the current type
      if (!results[type]) {
        results[type] = [];
      }
      results[type].push({ query, result: parsedData });

      // Write results to a JSON file
      fs.writeFileSync("results.json", JSON.stringify(results, null, 2));

      console.log(`Results for ${type} - ${query} written to file.`);
    });
  });

  req.on("error", (error) => {
    console.error(`Error fetching results for ${query}: ${error.message}`);
  });

  req.end();
}

function wait(ms) {
  return new Promise((resolve) => {
    setTimeout(resolve, ms);
  });
}

// Read and process the file
async function processFile(filePath) {
  const lines = fs.readFileSync(filePath, "utf-8").split("\n");
  let currentType = "";

  for (const line of lines) {
    const trimmedLine = line.trim();
    if (trimmedLine.startsWith("#")) {
      // It's a header, set the current type
      currentType = trimmedLine.slice(1).trim();
    } else if (trimmedLine) {
      // It's a search query
      console.log(`Searching for ${currentType} - ${trimmedLine}`);
      await wait(6000); // GitHub rate limits the code search API to 10 per minute
      await searchGithub(trimmedLine, currentType);
    }
  }
}

// Replace with your file path
const filePath = "search-params.txt";
processFile(filePath);
